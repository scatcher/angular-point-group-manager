(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("angular-point"), require("lodash"), require("toastr"));
	else if(typeof define === 'function' && define.amd)
		define(["angular-point", "lodash", "toastr"], factory);
	else if(typeof exports === 'object')
		exports["angular-point-group-manager"] = factory(require("angular-point"), require("lodash"), require("toastr"));
	else
		root["angular-point-group-manager"] = factory(root["angular-point"], root["lodash"], root["toastr"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmory imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmory exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		Object.defineProperty(exports, name, {
/******/ 			configurable: false,
/******/ 			enumerable: true,
/******/ 			get: getter
/******/ 		});
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 6);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_toastr__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_toastr___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_toastr__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__dataContainer__ = __webpack_require__(2);
/* unused harmony export GroupManagerController */
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return GroupManagerComponent; });



var GroupManagerController = (function () {
    function GroupManagerController(NgTableParams, $filter, $timeout, $q, apDataService) {
        this.NgTableParams = NgTableParams;
        this.$filter = $filter;
        this.$timeout = $timeout;
        this.$q = $q;
        this.apDataService = apDataService;
        this.activeTab = 'Users';
        this.assignedOptions = [];
        this.availableOptions = [];
        this.groupFilter = '';
        this.groups = new __WEBPACK_IMPORTED_MODULE_2__dataContainer__["a" /* DataContainer */]();
        this.siteUrl = '';
        this.tabContents = {};
        this.userFilter = '';
        this.users = new __WEBPACK_IMPORTED_MODULE_2__dataContainer__["a" /* DataContainer */]();
    }
    GroupManagerController.prototype.$onInit = function () {
        var _this = this;
        this.apDataService.getCurrentSite()
            .then(function (siteUrl) { return _this.siteUrl = siteUrl; });
        this.$q.all([this.getUserCollection(), this.getGroupCollection()])
            .then(function () { return _this.updateTab('Users'); });
        this.buildTables();
    };
    GroupManagerController.prototype.buildInputs = function (assignedItems, type) {
        // Create a quick map to speed up checking in future
        var map = __WEBPACK_IMPORTED_MODULE_1_lodash__["map"](assignedItems, function (item) { return item.ID; });
        var available = [];
        var assigned = [];
        var data = this[type];
        // Clear out any existing data
        data.available.length = 0;
        data.selectedAvailable.length = 0;
        data.assigned.length = 0;
        data.selectedAssigned.length = 0;
        __WEBPACK_IMPORTED_MODULE_1_lodash__["each"](data.all, function (item) {
            if (__WEBPACK_IMPORTED_MODULE_1_lodash__["indexOf"](map, item.ID) > -1) {
                // Already assigned
                assigned.push(item);
            }
            else {
                available.push(item);
            }
        });
        Array.prototype.push.apply(data.available, available);
        Array.prototype.push.apply(data.assigned, assigned);
    };
    GroupManagerController.prototype.buildTables = function () {
        var _this = this;
        this.groupsTable = new this.NgTableParams({
            page: 1,
            count: 30,
            sorting: {
                title: 'asc'
            }
        }, {
            total: this.groups.all.length,
            getData: function (params) {
                // use build-in angular filter
                var orderedData = _this.groups.all;
                var filteredData = _this.$filter('filter')(orderedData, function (record) {
                    var match = false;
                    if (_this.groupFilter === '') {
                        return true;
                    }
                    var textFields = ['ID', 'Name', 'Description'];
                    var searchStringLowerCase = _this.groupFilter.toLowerCase();
                    __WEBPACK_IMPORTED_MODULE_1_lodash__["each"](textFields, function (fieldName) {
                        if (record[fieldName].toLowerCase().indexOf(searchStringLowerCase) !== -1) {
                            match = true;
                        }
                    });
                    return match;
                });
                params.total(filteredData.length);
                return filteredData.slice((params.page() - 1) * params.count(), params.page() * params.count());
            }
        });
        this.usersTable = new this.NgTableParams({
            page: 1,
            count: 30,
            sorting: {
                title: 'asc'
            }
        }, {
            total: this.users.all.length,
            getData: function (params) {
                var orderedData = _this.users.all;
                var filteredData = _this.$filter('filter')(orderedData, function (record) {
                    var match = false;
                    if (_this.userFilter === '') {
                        return true;
                    }
                    var textFields = ['ID', 'Name', 'Email'];
                    var searchStringLowerCase = _this.userFilter.toLowerCase();
                    __WEBPACK_IMPORTED_MODULE_1_lodash__["each"](textFields, function (fieldName) {
                        if (record[fieldName].toLowerCase().indexOf(searchStringLowerCase) !== -1) {
                            match = true;
                        }
                    });
                    return match;
                });
                params.total(orderedData.length);
                return filteredData.slice((params.page() - 1) * params.count(), params.page() * params.count());
            }
        });
    };
    GroupManagerController.prototype.initializeFilterFields = function () {
        this.users.filter = this.users.filter || this.groups.all[0];
        this.groups.filter = this.groups.filter || this.users.all[0];
    };
    GroupManagerController.prototype.getGroupCollection = function () {
        var _this = this;
        var deferred = this.$q.defer();
        this.apDataService.getCollection({
            webURL: this.siteUrl,
            operation: 'GetGroupCollectionFromSite'
        }).then(function (response) {
            Array.prototype.push.apply(_this.groups.all, response);
            deferred.resolve(_this.groups.all);
        });
        return deferred.promise;
    };
    GroupManagerController.prototype.getUserCollection = function () {
        var _this = this;
        var deferred = this.$q.defer();
        this.apDataService.getCollection({
            webURL: this.siteUrl,
            operation: 'GetUserCollectionFromSite'
        }).then(function (response) {
            // Assume that valid users all have email addresses and services/groups don't
            __WEBPACK_IMPORTED_MODULE_1_lodash__["each"](response, function (user) { return _this.users.all.push(user); });
            deferred.resolve(_this.users.all);
        });
        return deferred.promise;
    };
    GroupManagerController.prototype.groupDetailsLink = function (group) {
        this.users.filter = group;
        this.updateTab('Users');
    };
    /**
     * Copy users from one group into another
     */
    GroupManagerController.prototype.mergeGroups = function () {
        var _this = this;
        this.updatePermissions('AddUserToGroup', this.users.assigned, [this.targetGroup])
            .then(function (promiseArray) {
            __WEBPACK_IMPORTED_MODULE_0_toastr__["success"](promiseArray.length + ' users successfully merged.');
            // Reset dropdowns to empty
            _this.sourceGroup = undefined;
            _this.targetGroup = undefined;
        });
    };
    GroupManagerController.prototype.updateAvailableGroups = function () {
        var _this = this;
        var deferred = this.$q.defer();
        __WEBPACK_IMPORTED_MODULE_0_toastr__["info"]('Retrieving an updated list of groups for the current user');
        this.apDataService.getCollection({
            webURL: this.siteUrl,
            operation: 'GetGroupCollectionFromUser',
            userLoginName: this.groups.filter.LoginName
        }).then(function (response) {
            _this.buildInputs(response, 'groups');
            deferred.resolve(response);
        });
        return deferred.promise;
    };
    GroupManagerController.prototype.updateAvailableUsers = function (group) {
        var _this = this;
        var deferred = this.$q.defer();
        __WEBPACK_IMPORTED_MODULE_0_toastr__["info"]('Retrieving an updated list of users for the current group');
        this.apDataService.getCollection({
            webURL: this.siteUrl,
            groupName: group.Name,
            operation: 'GetUserCollectionFromGroup'
        }).then(function (response) {
            _this.buildInputs(response, 'users');
            deferred.resolve(response);
        }, function (err) {
            __WEBPACK_IMPORTED_MODULE_0_toastr__["error"]('Please verify that you have sufficient permissions to view members of this group');
            // No users were returned so display all users as available
            deferred.resolve([]);
        });
        return deferred.promise;
    };
    /**
     * Can add/remove multiple users to multiple groups asynchronously
     * @param {string} operation - Either 'AddUserToGroup' || 'RemoveUserFromGroup'
     * @param {array} usersArray
     * @param {array} groupsArray
     * @returns {Promise.promise|*}
     */
    GroupManagerController.prototype.updatePermissions = function (operation, usersArray, groupsArray) {
        var _this = this;
        var deferredPermissionsUpdate = this.$q.defer();
        if (!usersArray.length) {
            __WEBPACK_IMPORTED_MODULE_0_toastr__["warning"]('Please make a selection');
        }
        else {
            __WEBPACK_IMPORTED_MODULE_0_toastr__["info"]('Processing your request');
            var queue_1 = [];
            __WEBPACK_IMPORTED_MODULE_1_lodash__["each"](usersArray, function (user) {
                __WEBPACK_IMPORTED_MODULE_1_lodash__["each"](groupsArray, function (group) {
                    var deferred = _this.$q.defer();
                    _this.apDataService.serviceWrapper({
                        webUrl: _this.siteUrl,
                        filterNode: 'User',
                        operation: operation,
                        groupName: group.Name,
                        userLoginName: user.LoginName
                    }).then(function (response) {
                        deferred.resolve(response);
                    });
                    queue_1.push(deferred.promise);
                });
            });
            this.users.clearSelected();
            this.groups.clearSelected();
            // Resolved when all promises complete
            this.$q.all(queue_1).then(function (responses) {
                __WEBPACK_IMPORTED_MODULE_0_toastr__["success"](operation === 'AddUserToGroup' ?
                    'User successfully added' :
                    'User successfully removed');
                // Retrieve updated value from the server
                if (_this.activeTab === 'Users') {
                    _this.updateAvailableUsers(_this.users.filter);
                }
                else {
                    _this.updateAvailableGroups();
                }
                deferredPermissionsUpdate.resolve(responses);
            }, function () {
                __WEBPACK_IMPORTED_MODULE_0_toastr__["error"]('There was a problem removing the user');
            });
        }
        return deferredPermissionsUpdate.promise;
    };
    GroupManagerController.prototype.updateTab = function (tab) {
        this.initializeFilterFields();
        this.activeTab = tab;
        if (tab === 'Groups') {
            this.updateAvailableGroups().then(function () {
            });
        }
        else {
            this.updateAvailableUsers(this.users.filter).then(function () {
            });
        }
    };
    GroupManagerController.prototype.userDetailsLink = function (user) {
        this.groups.filter = user;
        this.updateTab('Groups');
    };
    return GroupManagerController;
}());

GroupManagerController.$inject = ['NgTableParams', '$filter', '$timeout', '$q', 'apDataService'];
var GroupManagerComponent = {
    controller: GroupManagerController,
    template: __webpack_require__(3)
};


/***/ },
/* 1 */
/***/ function(module, exports) {

module.exports = require("angular-point");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return DataContainer; });
var DataContainer = (function () {
    function DataContainer() {
        this.all = [];
        this.assigned = [];
        this.available = [];
        this.selectedAssigned = [];
        this.selectedAvailable = [];
    }
    DataContainer.prototype.clearSelected = function () {
        this.selectedAvailable.length = 0;
        this.selectedAssigned.length = 0;
    };
    return DataContainer;
}());



/***/ },
/* 3 */
/***/ function(module, exports) {

module.exports = "<style type=\"text/css\">\n    select.multiselect {\n        min-height: 400px;\n    }\n\n    .ui-match {\n        background: yellow;\n    }\n</style>\n\n\n<div class=\"container\">\n<ul class=\"nav nav-tabs\">\n    <li ng-class=\"{active: $ctrl.activeTab === 'Users'}\">\n        <a href ng-click=\"$ctrl.updateTab('Users')\">Users</a>\n    </li>\n    <li ng-class=\"{active: $ctrl.activeTab === 'Groups'}\">\n        <a href ng-click=\"$ctrl.updateTab('Groups')\">Groups</a>\n    </li>\n    <li ng-class=\"{active: $ctrl.activeTab === 'Merge'}\">\n        <a href ng-click=\"$ctrl.activeTab = 'Merge'\">Merge</a>\n    </li>\n    <li ng-class=\"{active: $ctrl.activeTab === 'UserList'}\">\n        <a href ng-click=\"$ctrl.activeTab = 'UserList'\">User List</a>\n    </li>\n    <li ng-class=\"{active: $ctrl.activeTab === 'GroupList'}\">\n        <a href ng-click=\"$ctrl.activeTab = 'GroupList'\">Group List</a>\n    </li>\n</ul>\n\n<div ng-if=\"$ctrl.activeTab === 'Users'\">\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\">\n            <div class=\"row\">\n                <div class=\"col-xs-5\">\n                    <span style=\"font-weight:bold\">Select a Group:</span>\n                    <select class=\"form-control\" ng-model=\"$ctrl.users.filter\"\n                            ng-options=\"group.Name for group in $ctrl.groups.all\"\n                            ng-change=\"$ctrl.updateAvailableUsers($ctrl.users.filter)\" style=\"min-width: 100px;\"></select>\n                </div>\n                <div class=\"col-xs-7\">\n                    <span style=\"font-weight:bold\">Site/Site Collection: </span>\n                    <input class=\"form-control\" ng-model=\"$ctrl.siteUrl\" ng-change=\"$ctrl.updateAvailableUsers($ctrl.users.filter)\">\n                </div>\n            </div>\n            <div class=\"row\" ng-if=\"$ctrl.users.filter.Description\">\n                <div class=\"col-xs-12\">\n                    <p class=\"help-block\">Description: {{ $ctrl.users.filter.Description }}</p>\n                </div>\n            </div>\n        </div>\n        <div class=\"panel-body\">\n            <div class=\"row\">\n                <div class=\"col-xs-12\">\n                    <div colspan=\"3\" class=\"description\">This tab will allow you to quickly assign multiple users to a\n                        selected group.\n                    </div>\n                </div>\n            </div>\n            <hr class=\"hr-sm\">\n            <div class=\"row\">\n                <div class=\"col-xs-5\">\n                    <div class=\"form-group\">\n                        <label>Available Users ({{$ctrl.users.available.length}})</label>\n                        <select ng-model=\"$ctrl.users.selectedAvailable\"\n                                ng-options=\"user.Name for user in $ctrl.users.available\"\n                                multiple=\"multiple\" class=\"multiselect form-control\"></select>\n                    </div>\n                </div>\n                <div class=\"col-xs-2 text-center\" style=\"padding-top: 175px\">\n                    <button class=\"btn btn-default\" style=\"width:80px;\"\n                            ng-click=\"$ctrl.updatePermissions('AddUserToGroup', $ctrl.users.selectedAvailable, [$ctrl.users.filter])\"\n                            title=\"Add user\">\n                        <i class=\"fa fa-2x fa-angle-double-right\"></i>\n                    </button>\n                    <br/><br/>\n                    <button class=\"btn btn-default\" style=\"width:80px;\"\n                            ng-click=\"$ctrl.updatePermissions('RemoveUserFromGroup', $ctrl.users.selectedAssigned, [$ctrl.users.filter])\">\n                        <i class=\"fa fa-2x fa-angle-double-left\"></i>\n                    </button>\n                </div>\n                <div class=\"col-xs-5\">\n                    <div class=\"form-group\">\n                        <label>Assigned Users ({{$ctrl.users.assigned.length}})</label>\n                        <select ng-model=\"$ctrl.users.selectedAssigned\"\n                                ng-options=\"user.Name for user in $ctrl.users.assigned\"\n                                multiple=\"multiple\" class=\"multiselect form-control\"></select>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div ng-if=\"$ctrl.activeTab === 'Groups'\">\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\">\n            <div class=\"row\">\n                <div class=\"col-xs-5\">\n                    <span style=\"font-weight:bold\">Select a User:</span>\n                    <select class=\"form-control\" ng-model=\"$ctrl.groups.filter\"\n                            ng-options=\"user.Name for user in $ctrl.users.all\"\n                            ng-change=\"$ctrl.updateAvailableGroups($ctrl.groups.filter)\" style=\"min-width: 100px;\"></select>\n                </div>\n                <div class=\"col-xs-7\">\n                    <span style=\"font-weight:bold\">Site/Site Collection: </span>\n                    <input class=\"form-control\" ng-model=\"$ctrl.siteUrl\"\n                           ng-change=\"$ctrl.updateAvailableGroups($ctrl.groups.filter)\">\n                </div>\n            </div>\n        </div>\n        <div class=\"panel-body\">\n            <div class=\"row\">\n                <div class=\"col-xs-12\">\n                    <div colspan=\"3\" class=\"description\">This page was created to make the process of managing\n                        users/groups within the site\n                        collection more manageable. When a user is selected, the available groups are displayed on the\n                        left and the groups that the user is currently a member of will show on the right. Selecting\n                        multiple groups is supported.\n                    </div>\n                </div>\n            </div>\n            <hr class=\"hr-sm\">\n            <div class=\"row\">\n                <div class=\"col-xs-5\">\n                    <div class=\"form-group\">\n                        <label>Available Groups ({{$ctrl.groups.available.length}})</label>\n                        <select ng-model=\"$ctrl.groups.selectedAvailable\"\n                                ng-options=\"group.Name for group in $ctrl.groups.available\"\n                                multiple=\"multiple\" class=\"multiselect form-control\"></select>\n                    </div>\n                </div>\n                <div class=\"col-xs-2 text-center\" style=\"padding-top: 175px\">\n                    <button class=\"btn btn-default\" style=\"width:80px;\"\n                            ng-click=\"$ctrl.updatePermissions('AddUserToGroup', [$ctrl.groups.filter], $ctrl.groups.selectedAvailable)\"\n                            title=\"Add to group\">\n                        <i class=\"fa fa-2x fa-angle-double-right\"></i>\n                    </button>\n                    <br/><br/>\n                    <button class=\"btn btn-default\" style=\"width:80px;\"\n                            ng-click=\"$ctrl.updatePermissions('RemoveUserFromGroup', [$ctrl.groups.filter], $ctrl.groups.selectedAssigned)\">\n                        <i class=\"fa fa-2x fa-angle-double-left\"></i>\n                    </button>\n                </div>\n                <div class=\"col-xs-5\">\n                    <div class=\"form-group\">\n                        <label>Assigned Users ({{$ctrl.users.assigned.length}})</label>\n                        <select ng-model=\"$ctrl.groups.selectedAssigned\"\n                                ng-options=\"group.Name for group in $ctrl.groups.assigned\"\n                                multiple=\"multiple\" class=\"multiselect form-control\"></select>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div ng-if=\"$ctrl.activeTab === 'Merge'\">\n    <div class=\"panel panel-default\">\n        <div class=\"panel-body\">\n            <div class=\"row\">\n                <div class=\"col-xs-12\">\n                    <div class=\"description\">This tab allows us to copy the members from the \"Source\" group over to\n                        the \"Target\" group.\n                        It's not a problem if any of the users already exist in the destination group. Note: This is\n                        a onetime operation\n                        so any additional members added to the Source group will not automatically be added to the\n                        destination group. You will\n                        need to repeat this process.\n                    </div>\n                </div>\n            </div>\n            <hr class=\"hr-sm\">\n            <div class=\"row\">\n                <div class=\"col-xs-5\">\n                    <fieldset>\n                        <legend>Step 1</legend>\n                        <div class=\"well\">\n                            <div class=\"form-group\">\n                                <label>Source Group</label>\n                                <select class=\"form-control\" ng-model=\"$ctrl.sourceGroup\"\n                                        ng-options=\"group.Name for group in $ctrl.groups.all\"\n                                        ng-change=\"$ctrl.updateAvailableUsers($ctrl.sourceGroup)\"\n                                        style=\"min-width: 100px;\"></select>\n                            </div>\n                        </div>\n                    </fieldset>\n                </div>\n                <div class=\"col-xs-5\">\n                    <fieldset>\n                        <legend>Step 2</legend>\n\n                        <div class=\"well\">\n                            <div class=\"form-group\">\n                                <label>Source Group</label>\n                                <select class=\"form-control\" ng-model=\"$ctrl.targetGroup\"\n                                        ng-options=\"group.Name for group in $ctrl.groups.all\"\n                                        style=\"min-width: 100px;\"></select>\n                            </div>\n                        </div>\n                    </fieldset>\n                </div>\n                <div class=\"col-xs-2\">\n                    <fieldset>\n                        <legend>Step 3</legend>\n                        <button class=\"btn btn-success\"\n                                ng-disabled=\"$ctrl.sourceGroup.length < 1 || $ctrl.targetGroup.length < 1\"\n                                ng-click=\"$ctrl.mergeGroups()\"\n                                title=\"Copy all members from the source group over to the destination group.\">\n                            <i class=\"fa fa-2x fa-magic\"></i> Merge\n                        </button>\n                    </fieldset>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div ng-if=\"$ctrl.activeTab === 'UserList'\">\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\">\n            <span style=\"font-weight:bold\">User Filter</span>\n            <input type=\"text\" class=\"form-control\" ng-model=\"$ctrl.userFilter\"\n                   ng-change=\"$ctrl.usersTable.reload()\">\n        </div>\n        <table ng-table=\"$ctrl.usersTable\" class=\"table\" template-pagination=\"custom/pager\">\n            <tr ng-repeat=\"user in $data\">\n                <td data-title=\"'ID'\"> {{ user.ID }}</td>\n                <td data-title=\"'Name'\">\n                    <a href ng-click=\"$ctrl.userDetailsLink(user)\"\n                       ng-bind-html=\"user.Name |  highlight:$ctrl.userFilter\"></a>\n                </td>\n                <td data-title=\"'Email'\"> {{ user.Email }}</td>\n            </tr>\n\n        </table>\n    </div>\n</div>\n<div ng-if=\"$ctrl.activeTab === 'GroupList'\">\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading\">\n            <span style=\"font-weight:bold\">Group Filter</span>\n            <input type=\"text\" class=\"form-control\" ng-model=\"$ctrl.groupFilter\"\n                   ng-change=\"$ctrl.groupsTable.reload()\">\n        </div>\n        <table ng-table=\"$ctrl.groupsTable\" class=\"table\" template-pagination=\"custom/pager\">\n            <tr ng-repeat=\"group in $data\">\n                <td data-title=\"'ID'\"> {{ group.ID }}</td>\n                <td data-title=\"'Name'\">\n                    <a href ng-click=\"$ctrl.groupDetailsLink(group)\"\n                       ng-bind-html=\"group.Name |  highlight:$ctrl.groupFilter\"></a>\n                </td>\n                <td data-title=\"'Description'\"> {{ $ctrl.group.Description }}</td>\n            </tr>\n        </table>\n    </div>\n</div>\n</div>\n\n<script type=\"text/ng-template\" id=\"custom/pager\">\n    <div class=\"row\">\n        <div class=\"col-xs-12\">\n            <ul class=\"pager ng-cloak\">\n                <li ng-repeat=\"page in pages\"\n                    ng-class=\"{'disabled': !page.active}\"\n                    ng-show=\"page.type == 'prev' || page.type == 'next'\" ng-switch=\"page.type\">\n                    <a ng-switch-when=\"prev\" ng-click=\"params.page(page.number)\" href=\"\">\n                        <i class=\"fa fa-chevron-left\"></i>\n                    </a>\n                    <a ng-switch-when=\"next\" ng-click=\"params.page(page.number)\" href=\"\">\n                        <i class=\"fa fa-chevron-right\"></i>\n                    </a>\n                </li>\n            </ul>\n        </div>\n    </div>\n</script>"

/***/ },
/* 4 */
/***/ function(module, exports) {

module.exports = require("lodash");

/***/ },
/* 5 */
/***/ function(module, exports) {

module.exports = require("toastr");

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__groupManager__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_angular_point__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_angular_point___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_angular_point__);


__WEBPACK_IMPORTED_MODULE_1_angular_point__["AngularPointModule"]
    .component('apGroupManager', __WEBPACK_IMPORTED_MODULE_0__groupManager__["a" /* GroupManagerComponent */]);


/***/ }
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,